/* Creación de usuario si estás trabajando con BD Oracle Local (Oracle XE) */

ALTER SESSION SET "_Oracle_Script"=TRUE;

CREATE USER PRY2204_S6 
IDENTIFIED BY "PRY2204.semana_6" 
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA UNLIMITED ON USERS;

GRANT CREATE SESSION TO PRY2204_S6;

GRANT RESOURCE TO PRY2204_S6;

ALTER USER PRY2204_S6 DEFAULT ROLE RESOURCE;

/* =======================================================
   LIMPIEZA DE OBJETOS (DROP TABLES)
   ======================================================= */
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE PAGO CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE RECETA_MEDICAMENTO CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE RECETA CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE MEDICAMENTO CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE PACIENTE CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE MEDICO CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE DIGITADOR CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE ESPECIALIDAD CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE COMUNA CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE CIUDAD CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE REGION CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

/* =======================================================
   CREACIÓN DE TABLAS (CASO 1)
   ======================================================= */

/* REGIÓN */
CREATE TABLE REGION (
   id_region        NUMBER GENERATED BY DEFAULT AS IDENTITY,
   nombre           VARCHAR2(100) NOT NULL,
   CONSTRAINT region_pk PRIMARY KEY (id_region)
);

/* CIUDAD */
CREATE TABLE CIUDAD (
   id_ciudad        NUMBER GENERATED BY DEFAULT AS IDENTITY,
   nombre           VARCHAR2(100) NOT NULL,
   id_region        NUMBER NOT NULL,
   CONSTRAINT ciudad_pk PRIMARY KEY (id_ciudad),
   CONSTRAINT ciudad_region_fk FOREIGN KEY (id_region)
      REFERENCES REGION(id_region)
);

/* COMUNA */
CREATE TABLE COMUNA (
   id_comuna        NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1101 INCREMENT BY 1),
   nombre           VARCHAR2(100) NOT NULL,
   id_ciudad        NUMBER NOT NULL,
   CONSTRAINT comuna_pk PRIMARY KEY (id_comuna),
   CONSTRAINT comuna_ciudad_fk FOREIGN KEY (id_ciudad)
      REFERENCES CIUDAD(id_ciudad)
);

/* PACIENTE */
CREATE TABLE PACIENTE (
   id_paciente      NUMBER GENERATED BY DEFAULT AS IDENTITY,
   rut              VARCHAR2(12) NOT NULL,
   digito_verificador CHAR(1) NOT NULL
      CHECK (REGEXP_LIKE(digito_verificador, '^[0-9K]$')),
   nombre           VARCHAR2(100) NOT NULL,
   edad             NUMBER, -- se eliminará en Caso 2
   direccion        VARCHAR2(200) NOT NULL,
   id_comuna        NUMBER NOT NULL,
   CONSTRAINT paciente_pk PRIMARY KEY (id_paciente),
   CONSTRAINT paciente_comuna_fk FOREIGN KEY (id_comuna)
      REFERENCES COMUNA(id_comuna)
);

/* ESPECIALIDAD */
CREATE TABLE ESPECIALIDAD (
   id_especialidad  NUMBER GENERATED BY DEFAULT AS IDENTITY,
   nombre           VARCHAR2(100) NOT NULL,
   CONSTRAINT especialidad_pk PRIMARY KEY (id_especialidad)
);

/* MEDICO */
CREATE TABLE MEDICO (
   id_medico        NUMBER GENERATED BY DEFAULT AS IDENTITY,
   rut              VARCHAR2(12) NOT NULL,
   digito_verificador CHAR(1) NOT NULL
      CHECK (REGEXP_LIKE(digito_verificador, '^[0-9K]$')),
   nombre           VARCHAR2(100) NOT NULL,
   telefono         VARCHAR2(20) NOT NULL UNIQUE,
   id_especialidad  NUMBER NOT NULL,
   CONSTRAINT medico_pk PRIMARY KEY (id_medico),
   CONSTRAINT medico_especialidad_fk FOREIGN KEY (id_especialidad)
      REFERENCES ESPECIALIDAD(id_especialidad)
);

/* DIGITADOR */
CREATE TABLE DIGITADOR (
   id_digitador     NUMBER GENERATED BY DEFAULT AS IDENTITY,
   rut              VARCHAR2(12) NOT NULL,
   digito_verificador CHAR(1) NOT NULL
      CHECK (REGEXP_LIKE(digito_verificador, '^[0-9K]$')),
   nombre           VARCHAR2(100) NOT NULL,
   CONSTRAINT digitador_pk PRIMARY KEY (id_digitador)
);

/* RECETA */
CREATE TABLE RECETA (
   id_receta        NUMBER GENERATED BY DEFAULT AS IDENTITY,
   fecha_emision    DATE NOT NULL,
   observaciones    VARCHAR2(500),
   fecha_expiracion DATE,
   tipo_receta      VARCHAR2(20) CHECK (tipo_receta IN ('DIGITAL','MAGISTRAL','RETENIDA','GENERAL','VETERINARIA')),
   id_paciente      NUMBER NOT NULL,
   id_medico        NUMBER NOT NULL,
   id_digitador     NUMBER NOT NULL,
   CONSTRAINT receta_pk PRIMARY KEY (id_receta),
   CONSTRAINT receta_paciente_fk FOREIGN KEY (id_paciente)
      REFERENCES PACIENTE(id_paciente),
   CONSTRAINT receta_medico_fk FOREIGN KEY (id_medico)
      REFERENCES MEDICO(id_medico),
   CONSTRAINT receta_digitador_fk FOREIGN KEY (id_digitador)
      REFERENCES DIGITADOR(id_digitador)
);

/* MEDICAMENTO */
CREATE TABLE MEDICAMENTO (
   id_medicamento   NUMBER GENERATED BY DEFAULT AS IDENTITY,
   nombre           VARCHAR2(100) NOT NULL,
   dosis            VARCHAR2(50) NOT NULL,
   stock            NUMBER NOT NULL,
   tipo             VARCHAR2(50),
   CONSTRAINT medicamento_pk PRIMARY KEY (id_medicamento)
);

/* RECETA_MEDICAMENTO (intermedia) */
CREATE TABLE RECETA_MEDICAMENTO (
   id_receta        NUMBER NOT NULL,
   id_medicamento   NUMBER NOT NULL,
   CONSTRAINT receta_med_pk PRIMARY KEY (id_receta, id_medicamento),
   CONSTRAINT receta_med_receta_fk FOREIGN KEY (id_receta)
      REFERENCES RECETA(id_receta),
   CONSTRAINT receta_med_medic_fk FOREIGN KEY (id_medicamento)
      REFERENCES MEDICAMENTO(id_medicamento)
);

/* PAGO */
CREATE TABLE PAGO (
   id_pago          NUMBER GENERATED BY DEFAULT AS IDENTITY,
   monto            NUMBER NOT NULL,
   fecha_pago       DATE NOT NULL,
   metodo_pago      VARCHAR2(20),
   id_receta        NUMBER NOT NULL,
   CONSTRAINT pago_pk PRIMARY KEY (id_pago),
   CONSTRAINT pago_receta_fk FOREIGN KEY (id_receta)
      REFERENCES RECETA(id_receta)
);

/* =======================================================
   MODIFICACIONES (CASO 2)
   ======================================================= */

/* Agregar precio unitario a medicamentos */
ALTER TABLE MEDICAMENTO
   ADD (precio_unitario NUMBER NOT NULL
        CHECK (precio_unitario BETWEEN 1000 AND 2000000));

/* Restringir métodos de pago */
ALTER TABLE PAGO
   ADD CONSTRAINT pago_metodo_chk CHECK (metodo_pago IN ('EFECTIVO','TARJETA','TRANSFERENCIA'));

/* Reemplazar edad por fecha de nacimiento en PACIENTE */
ALTER TABLE PACIENTE DROP COLUMN edad;
ALTER TABLE PACIENTE ADD (fecha_nacimiento DATE);
